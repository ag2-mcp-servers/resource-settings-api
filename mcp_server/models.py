# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:43:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class DataType(Enum):
    DATA_TYPE_UNSPECIFIED = 'DATA_TYPE_UNSPECIFIED'
    BOOLEAN = 'BOOLEAN'
    STRING = 'STRING'
    STRING_SET = 'STRING_SET'
    ENUM_VALUE = 'ENUM_VALUE'
    DURATION_VALUE = 'DURATION_VALUE'
    STRING_MAP = 'STRING_MAP'


class GoogleCloudResourcesettingsV1ValueEnumValue(BaseModel):
    value: Optional[str] = Field(None, description='The value of this enum')


class GoogleCloudResourcesettingsV1ValueStringMap(BaseModel):
    mappings: Optional[Dict[str, str]] = Field(
        None, description='The key-value pairs in the map'
    )


class GoogleCloudResourcesettingsV1ValueStringSet(BaseModel):
    values: Optional[List[str]] = Field(None, description='The strings in the set')


class View(Enum):
    SETTING_VIEW_UNSPECIFIED = 'SETTING_VIEW_UNSPECIFIED'
    SETTING_VIEW_BASIC = 'SETTING_VIEW_BASIC'
    SETTING_VIEW_EFFECTIVE_VALUE = 'SETTING_VIEW_EFFECTIVE_VALUE'
    SETTING_VIEW_LOCAL_VALUE = 'SETTING_VIEW_LOCAL_VALUE'


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class GoogleCloudResourcesettingsV1Value(BaseModel):
    booleanValue: Optional[bool] = Field(
        None, description='Defines this value as being a boolean value.'
    )
    durationValue: Optional[str] = Field(
        None, description='Defines this value as being a Duration.'
    )
    enumValue: Optional[GoogleCloudResourcesettingsV1ValueEnumValue] = Field(
        None, description='Defines this value as being a Enum.'
    )
    stringMapValue: Optional[GoogleCloudResourcesettingsV1ValueStringMap] = Field(
        None, description='Defines this value as being a StringMap.'
    )
    stringSetValue: Optional[GoogleCloudResourcesettingsV1ValueStringSet] = Field(
        None, description='Defines this value as being a StringSet.'
    )
    stringValue: Optional[str] = Field(
        None, description='Defines this value as being a string value.'
    )


class GoogleCloudResourcesettingsV1SettingMetadata(BaseModel):
    dataType: Optional[DataType] = Field(
        None, description='The data type for this setting.'
    )
    defaultValue: Optional[GoogleCloudResourcesettingsV1Value] = Field(
        None,
        description='The value provided by Setting.effective_value if no setting value is explicitly set. Note: not all settings have a default value.',
    )
    description: Optional[str] = Field(
        None, description='A detailed description of what this setting does.'
    )
    displayName: Optional[str] = Field(
        None, description='The human readable name for this setting.'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='A flag indicating that values of this setting cannot be modified. See documentation for the specific setting for updates and reasons.',
    )


class GoogleCloudResourcesettingsV1Setting(BaseModel):
    effectiveValue: Optional[GoogleCloudResourcesettingsV1Value] = Field(
        None,
        description="Output only. The effective value of the setting at the given parent resource, evaluated based on the resource hierarchy The effective value evaluates to one of the following options, in this order. If an option is not valid or doesn't exist, then the next option is used: 1. The local setting value on the given resource: Setting.local_value 2. If one of the given resource's ancestors in the resource hierarchy have a local setting value, the local value at the nearest such ancestor. 3. The setting's default value: SettingMetadata.default_value 4. An empty value, defined as a `Value` with all fields unset. The data type of Value must always be consistent with the data type defined in Setting.metadata.",
    )
    etag: Optional[str] = Field(
        None,
        description='A fingerprint used for optimistic concurrency. See UpdateSetting for more details.',
    )
    localValue: Optional[GoogleCloudResourcesettingsV1Value] = Field(
        None,
        description='The configured value of the setting at the given parent resource, ignoring the resource hierarchy. The data type of Value must always be consistent with the data type defined in Setting.metadata.',
    )
    metadata: Optional[GoogleCloudResourcesettingsV1SettingMetadata] = Field(
        None,
        description='Output only. Metadata about a setting which is not editable by the end user.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the setting. Must be in one of the following forms: * `projects/{project_number}/settings/{setting_name}` * `folders/{folder_id}/settings/{setting_name}` * `organizations/{organization_id}/settings/{setting_name}` For example, "/projects/123/settings/gcp-enableMyFeature"',
    )


class GoogleCloudResourcesettingsV1ListSettingsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Unused. A page token used to retrieve the next page.'
    )
    settings: Optional[List[GoogleCloudResourcesettingsV1Setting]] = Field(
        None,
        description='A list of settings that are available at the specified Cloud resource.',
    )
